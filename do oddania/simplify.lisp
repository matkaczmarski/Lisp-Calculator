(defun remove-identity-elements (operands identity)
  (flet ((is-identity (element)
           (equal element identity)))
    (let ((filtered-operands (remove-if #'is-identity operands)))
      (or filtered-operands (list identity)))))

(defun compact-single-operand-operation (expression)
  (let ((operands (rest expression)))
    (if (rest operands)
        expression
        (first operands))))

(defun simplify-operation (operator operands identity)
  (compact-single-operand-operation
   (cons operator (remove-identity-elements operands identity))))

(defun simplify (expression)
  (if (listp expression)
      (let ((operator (first expression))
            (operands (mapcar #'simplify (rest expression))))
        (cond ((eq operator '+) (simplify-operation '+ operands 0))
              ((eq operator '*)
               (if (find 0 operands)
                   0
                   (simplify-operation '* operands 1)))
              (t expression)))
      expression))

(defun all-numbers (&rest elements)
    (cond
        ((null (first elements))
            nil)
        ((= (length elements) 1)
            (numberp (first elements)))
        ((numberp (first elements))
            (apply `all-numbers (rest elements)))
        (t
            nil)
    )
)
(defun get-empty-value (operator)
    (cond
        ((eq operator `+)
            0)
        ((eq operator `-)
            0)
        ((eq operator `*)
            1)
        ((eq operator `/)
            1)
    )
)
(defun numbers-operation (operator &rest elements)
    (let ((empty-value (get-empty-value operator)))
    (cond
        ((null elements)
            empty-value)
        ((= (length elements) 1)
            (if (numberp (first elements))
                (first elements)
                empty-value))
        (t
            (if (numberp (first elements))
                (eval (list operator (first elements) (apply `numbers-operation operator (rest elements))))
                (apply `numbers-operation operator (rest elements)))
        )
        
    ))
)
   
(defun get-symbols (&rest elements)
    (cond
        ((null elements)
            `())
        ((= (length elements) 1)
            (if (numberp (first elements))
                `()
                (first elements)))
        (t
            (if (numberp (first elements))
                (apply `get-symbols (rest elements))
                (cons (first elements) (apply `get-symbols (rest elements))))
        )
    )
)
(defun eval-helper (operator &rest operands)
    (let ((result (apply `numbers-operation operator operands))
          (symbols (apply `get-symbols operands)))
    (cond
        ((null result)
             symbols)
        ((= result 0)
             symbols)
        ((null symbols)
            (cons result nil))
        (t
            (append (list operator result) symbols))
    ))
)
(defun my-eval (expression)
  (if (listp expression)
      (let ((operator (first expression))
            (operands (mapcar #'my-eval (rest expression))))
        (cond 
            ((apply `all-numbers operands)
                (eval expression))
              (t 
                (apply `eval-helper operator operands))))
      expression))

(setq expr `(+ (+ 2 3) (* (+ `y 0 2) (- 5 2) 0) (+ `y 1) 3 `y))
(setq expr (my-eval expr))
(setq expr (my-eval (simplify expr)))
(print expr)
(print (my-eval expr))
(setq y 1)
(print (eval (my-eval expr)))